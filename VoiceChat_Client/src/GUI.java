
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.TargetDataLine;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import java.util.ArrayList;
import java.lang.NullPointerException;

/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author dosse
 */
public class GUI extends javax.swing.JFrame {        
    Client c;
    RestClient r;
    private MicTester micTester;
    //this class is used to test the microphone. it manages the volume meter
    private class MicTester extends Thread{
        private TargetDataLine mic = null;
        public MicTester() {
            
        }
        @Override
        public void run() {
                
                try {
                    AudioFormat af = SoundPacket.defaultFormat;
                    DataLine.Info info = new DataLine.Info(TargetDataLine.class, null);
                    mic = (TargetDataLine) (AudioSystem.getLine(info));
                    mic.open(af);
                    mic.start();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane,"Microphone not detected.\nPress OK to close this program", "Error",JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }
                for (;;) {
                    Utils.sleep(10);
                    if(mic.available()>0){
                        byte[] buff=new byte[SoundPacket.defaultDataLenght];
                        mic.read(buff,0,buff.length);
                        long tot=0;
                        for(int i=0;i<buff.length;i++) tot+=MicThread.amplification*Math.abs(buff[i]);
                        tot*=2.5;
                        tot/=buff.length;
                        micLev.setValue((int)tot);
                    }
                }
            }
        private void close(){
            if(mic!=null) mic.close();
            stop();
        }
    }
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        micTester=new MicTester();
        micTester.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ip = new javax.swing.JTextField();
        start = new javax.swing.JButton();
        port = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        micLev = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        micVol = new javax.swing.JSlider();
        playerNameField = new javax.swing.JTextField();
        setPlayerNameButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        teamList = new javax.swing.JList<>();
        createTeamButton = new javax.swing.JButton();
        createTeamNameField = new javax.swing.JTextField();
        joinTeamButton = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        answersArea = new javax.swing.JTextArea();
        sendAnswerButton = new javax.swing.JButton();
        refreshTeamsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        playersRefreshButton = new javax.swing.JButton();
        leaveTeamButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        elevateToTeamCaptainButton = new javax.swing.JButton();
        elevateToQuizzoMasterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ip.setText("127.0.0.1");
        ip.setToolTipText("The IP of the Quizzo Server");

        start.setText("Connect");
        start.setToolTipText("Connect to Quizzo Server");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        port.setText("1049");
        port.setToolTipText("The Port of the Quizzo Server (Default is 1049)");

        jLabel1.setText("Server IP and port");

        jLabel3.setText("Mic level");

        jLabel2.setText("If the mic level doesn't move as you speak, the mic volume is too low");

        jLabel4.setText("Mic volume");

        micVol.setMaximum(300);
        micVol.setMinimum(50);
        micVol.setValue(100);
        micVol.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                micVolStateChanged(evt);
            }
        });

        String AlphaNumericString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        int n=5;
        StringBuilder sb = new StringBuilder(n);
        for (int i = 0; i < n; i++) {
            int index
            = (int)(AlphaNumericString.length()
                * Math.random());
            sb.append(AlphaNumericString
                .charAt(index));
        }
        playerNameField.setText("Player_" + sb.toString());

        setPlayerNameButton.setText("Set Player Name");
        setPlayerNameButton.setToolTipText("Set Your Name");
        setPlayerNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPlayerNameButtonActionPerformed(evt);
            }
        });

        teamList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                teamListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(teamList);

        createTeamButton.setText("Create Team");
        createTeamButton.setToolTipText("Create A Team");
        createTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTeamButtonActionPerformed(evt);
            }
        });

        StringBuilder sbt = new StringBuilder(n);
        for (int i = 0; i < n; i++) {
            int index
            = (int)(AlphaNumericString.length()
                * Math.random());
            sbt.append(AlphaNumericString
                .charAt(index));
        }
        createTeamNameField.setText("Team_" + sbt.toString());
        createTeamNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTeamNameFieldActionPerformed(evt);
            }
        });

        joinTeamButton.setBackground(new java.awt.Color(0, 153, 204));
        joinTeamButton.setText("Join Team");
        joinTeamButton.setToolTipText("Join the Selected Team");
        joinTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinTeamButtonActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Mute Yourself");
        jCheckBox1.setToolTipText("Mute your Microphone");

        jCheckBox2.setText("Mute Team");
        jCheckBox2.setToolTipText("Mute Entire Team");
        jCheckBox2.setEnabled(false);

        jLabel5.setText("Don't use this unlss you're the team captain ");

        answersArea.setColumns(20);
        answersArea.setRows(5);
        jScrollPane2.setViewportView(answersArea);

        sendAnswerButton.setBackground(new java.awt.Color(102, 153, 0));
        sendAnswerButton.setText("Send Answer");
        sendAnswerButton.setToolTipText("Submit Answers to Quizzo Master (Only for Team Captain)");
        sendAnswerButton.setEnabled(false);
        sendAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendAnswerButtonActionPerformed(evt);
            }
        });

        refreshTeamsButton.setText("Refresh Teams");
        refreshTeamsButton.setToolTipText("Refresh the Teams List");
        refreshTeamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTeamsButtonActionPerformed(evt);
            }
        });

        playerList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(playerList);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Players on Team");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Teams");

        playersRefreshButton.setText("Refresh Players");
        playersRefreshButton.setToolTipText("Refresh the Players on Team List");
        playersRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playersRefreshButtonActionPerformed(evt);
            }
        });

        leaveTeamButton.setText("Leave Team");
        leaveTeamButton.setToolTipText("Leave the Team You're On");
        leaveTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveTeamButtonActionPerformed(evt);
            }
        });

        disconnectButton.setBackground(new java.awt.Color(153, 0, 0));
        disconnectButton.setText("Disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        elevateToTeamCaptainButton.setText("Team Captain");
        elevateToTeamCaptainButton.setToolTipText("Click To Become Team Captain");
        elevateToTeamCaptainButton.setEnabled(false);
        elevateToTeamCaptainButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                elevateToTeamCaptainButtonMouseClicked(evt);
            }
        });
        elevateToTeamCaptainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elevateToTeamCaptainButtonActionPerformed(evt);
            }
        });

        elevateToQuizzoMasterButton.setText("Quizzo Master");
        elevateToQuizzoMasterButton.setToolTipText("Click To Become Quizzo Master");
        elevateToQuizzoMasterButton.setEnabled(false);
        elevateToQuizzoMasterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                elevateToQuizzoMasterButtonMouseClicked(evt);
            }
        });
        elevateToQuizzoMasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elevateToQuizzoMasterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ip)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(micLev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(micVol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(joinTeamButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(refreshTeamsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(playersRefreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(leaveTeamButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(playerNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                                .addGap(18, 18, 18))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(createTeamNameField)
                                                .addGap(18, 18, 18)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(setPlayerNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(createTeamButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(elevateToTeamCaptainButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(elevateToQuizzoMasterButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sendAnswerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(disconnectButton))))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(micLev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(micVol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setPlayerNameButton)
                    .addComponent(elevateToTeamCaptainButton)
                    .addComponent(elevateToQuizzoMasterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createTeamButton)
                    .addComponent(createTeamNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(joinTeamButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(leaveTeamButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshTeamsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playersRefreshButton))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(sendAnswerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disconnectButton))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        try {
            c = new Client(ip.getText(), Integer.parseInt(port.getText()));
            r = new RestClient(ip.getText(), Integer.parseInt(port.getText()) + 1, c.getChId());
            c.start(); //connect to specified server at specified port
        } catch (Exception ex) { //connection failed
            JOptionPane.showMessageDialog(rootPane, ex,"Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //connected, disable buttons
        micTester.close();
        ip.setEnabled(false);
        port.setEnabled(false);
        start.setEnabled(false);
        System.out.println(getComponents());
        micLev.setVisible(false);
        jLabel1.setEnabled(false);
        jLabel3.setVisible(false);
        micVol.setVisible(false);
        jLabel4.setVisible(false);
        jLabel2.setVisible(false);
        disconnectButton.setEnabled(true);
        System.out.printf("Client Channel ID: %d\r\n", c.getChId());
        
        //determine if Elevate To Quizzo Master Button is enabled
        try{
            if (r.getQuizzoMaster() == null) {
                elevateToQuizzoMasterButton.setEnabled(true);
            }
        } catch (Exception e) {System.out.println("Get Quizzo Master: " + e);}
        
        //initialize fields
        updateTeamList();
        try{
            r.setPlayerName(playerNameField.getText());
        } catch (Exception e) {}
        teamList.setSelectedIndex(0);
        //setSize(getWidth(),getHeight()-75);
    }//GEN-LAST:event_startActionPerformed

    private void micVolStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_micVolStateChanged
        MicThread.amplification=((double)(micVol.getValue()))/100.0;
    }//GEN-LAST:event_micVolStateChanged

    private void setPlayerNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPlayerNameButtonActionPerformed
        try {
            r.setPlayerName(playerNameField.getText());
            updatePlayerList();
        } catch (Exception e) {System.out.println("setPlayerName: " + e);}        
    }//GEN-LAST:event_setPlayerNameButtonActionPerformed

    private void createTeamNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTeamNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createTeamNameFieldActionPerformed

    private void refreshTeamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTeamsButtonActionPerformed
        updateTeamList();
        
    }//GEN-LAST:event_refreshTeamsButtonActionPerformed

    private void createTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTeamButtonActionPerformed
        try{
            r.createTeam(createTeamNameField.getText());
            updateTeamList();
        } catch (Exception e){}    }//GEN-LAST:event_createTeamButtonActionPerformed

    private void joinTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinTeamButtonActionPerformed
        try{
            r.addPlayerToTeam(teamList.getSelectedValue());
            this.updatePlayerList();
            //determine if Elevate To Team Captain Button is enabled
            try{
                if (r.getTeamCaptain() == null) {
                    elevateToTeamCaptainButton.setEnabled(true);
                }
            } catch (Exception e) {System.out.println("Get Team Captain: " + e);}
        } catch (Exception e) {System.out.println("joinTeam: " + e);}
    }//GEN-LAST:event_joinTeamButtonActionPerformed

    private void playersRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playersRefreshButtonActionPerformed
        updatePlayerList();
    }//GEN-LAST:event_playersRefreshButtonActionPerformed

    private void teamListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_teamListValueChanged
        updatePlayerList();
        if ("Lobby".equals(teamList.getSelectedValue())){
            joinTeamButton.setEnabled(false);
            leaveTeamButton.setEnabled(false);
        } else {
            joinTeamButton.setEnabled(true);
            leaveTeamButton.setEnabled(true);
        }
    }//GEN-LAST:event_teamListValueChanged

    private void leaveTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveTeamButtonActionPerformed
        // TODO add your handling code here:
        try{
            r.removePlayerFromTeam(teamList.getSelectedValue());
            updatePlayerList();
            sendAnswerButton.setEnabled(false);
        } catch (Exception e) {System.out.println("RemovdPlayer: " + e);}
    }//GEN-LAST:event_leaveTeamButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // kill the connection
        try{
            r.killPlayer();
        } catch (Exception e){System.out.println("killPlayer: " + e);}
    }//GEN-LAST:event_formWindowClosing

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        try{
            r.killPlayer();
        } catch (Exception e){System.out.println("Disconnect: " + e);}
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void elevateToTeamCaptainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elevateToTeamCaptainButtonActionPerformed
        // TODO add your handling code here:
        try{
            r.elevatePlayerToTeamCaptain();
            elevateToTeamCaptainButton.setEnabled(false); 
            sendAnswerButton.setEnabled(true);
            
        } catch (Exception e) {System.out.println("Elevate To Team Captain: " + e);}
    }//GEN-LAST:event_elevateToTeamCaptainButtonActionPerformed

    private void elevateToQuizzoMasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elevateToQuizzoMasterButtonActionPerformed
        try{
            r.elevatePlayerToQuizzoMaster();
            elevateToQuizzoMasterButton.setEnabled(false);
            sendAnswerButton.setEnabled(false);
            QMGUI q = new QMGUI();
            q.setRC(r);
            q.setUp();
            
        } catch (Exception e) {System.out.println("Elevate To Quizzo Master: " + e);}
        
    }//GEN-LAST:event_elevateToQuizzoMasterButtonActionPerformed

    private void elevateToQuizzoMasterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elevateToQuizzoMasterButtonMouseClicked
        if (!elevateToQuizzoMasterButton.isEnabled()){
            try{
                r.getQuizzoMaster();
            } catch (Exception e) {System.out.println("Get Quizzo Master: " + e);}
        }
    }//GEN-LAST:event_elevateToQuizzoMasterButtonMouseClicked

    private void sendAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendAnswerButtonActionPerformed
        // TODO add your handling code here:
        try{
            r.setAnswersForTeam(answersArea.getText());
        } catch (Exception e) {System.out.println("Send Answers: " + e);}
    }//GEN-LAST:event_sendAnswerButtonActionPerformed

    private void elevateToTeamCaptainButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elevateToTeamCaptainButtonMouseClicked
        if (!elevateToTeamCaptainButton.isEnabled()){
            try{
                r.getTeamCaptain();
            } catch (Exception e) {System.out.println("Get Team Captain: " + e);}
        }
    }//GEN-LAST:event_elevateToTeamCaptainButtonMouseClicked

    public void updatePlayerList(){
        ArrayList<String> players = new ArrayList<String>();
        String t = teamList.getSelectedValue();
        try{
            players = r.getPlayersOnTeam(t);
        } catch (Exception e) {System.out.println("UpdatePlayerList: " + e);}
        DefaultListModel<String> model = new DefaultListModel<>();
        for (String player: players){
            model.addElement(player);
        }
        playerList.setModel(model);
    }
    
    public void updateTeamList(){
        ArrayList<String> teams = new ArrayList<String>();
        try{
            teams = r.getTeams();
        } catch (Exception e){System.out.println("UpdateTeamList: " + e);}
        DefaultListModel<String> model = new DefaultListModel<>();
        model.addElement("Lobby");
        for (String team: teams){
            model.addElement(team);
        }
        teamList.setModel(model);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea answersArea;
    private javax.swing.JButton createTeamButton;
    private javax.swing.JTextField createTeamNameField;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton elevateToQuizzoMasterButton;
    private javax.swing.JButton elevateToTeamCaptainButton;
    private javax.swing.JTextField ip;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton joinTeamButton;
    private javax.swing.JButton leaveTeamButton;
    private javax.swing.JProgressBar micLev;
    private javax.swing.JSlider micVol;
    private javax.swing.JList<String> playerList;
    private javax.swing.JTextField playerNameField;
    private javax.swing.JButton playersRefreshButton;
    private javax.swing.JTextField port;
    private javax.swing.JButton refreshTeamsButton;
    private javax.swing.JButton sendAnswerButton;
    private javax.swing.JButton setPlayerNameButton;
    private javax.swing.JButton start;
    private javax.swing.JList<String> teamList;
    // End of variables declaration//GEN-END:variables
}
